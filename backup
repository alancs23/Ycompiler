grammar Micro;

//program
program : PROGRAM id pgm_body END ;
id : IDENTIFIER ;
pgm_body : decl func_declarations ;
decl : string_decl_list (decl)?
     | var_decl_list (decl)?
     |
     ;

// Global String Declaration 
string_decl_list  : string_decl (string_decl_tail)? ;
string_decl       : STRING id ':=' str ';'
                  | 
                  ;

str               : STRINGLITERAL ;
string_decl_tail  : string_decl (string_decl_tail)? ;



/* Function Paramater List */
param_decl_list   : param_decl param_decl_tail ;
param_decl        : var_type id ;
param_decl_tail   : ',' param_decl param_decl_tail 
                  |
                  ;

/* Function Declarations */
func_declarations : func_decl func_decl_tail ;
func_decl         : FUNCTION any_type id '('(param_decl_list |)')' BEGIN func_body END 
                  |
                  ;
func_decl_tail    : func_decl func_decl_tail 
                  |
                  ;
func_body         : decl stmt_list ;

/* Statement List */
stmt_list         : stmt stmt_tail
                  |
                  ;
stmt_tail         : stmt stmt_tail
                  |
                  ;
stmt              : base_stmt 
                  | if_stmt 
                  | do_while_stmt
                  ;
base_stmt         : assign_stmt 
                  | read_stmt 
                  | write_stmt 
                  | return_stmt
                  ;

/* Basic Statements */
assign_stmt       : assign_expr';' ;
assign_expr       : id EQUAL expr';' ;
read_stmt         : READ ( id_list )';' ;
write_stmt        : WRITE ( id_list )';' ;
return_stmt       : RETURN expr';' ;

/* Expressions */
expr              : factor expr_tail ;
expr_tail         : addop factor expr_tail 
                  |
                  ;
factor            : postfix_expr factor_tail;
factor_tail       : mulop postfix_expr factor_tail 
                  |
                  ;
postfix_expr      : primary 
                  | call_expr
                  ;
call_expr         : id ( {expr_list} ) ;
expr_list         : expr expr_list_tail ;
expr_list_tail    : ',' expr expr_list_tail
                  |
                  ;
primary           : 
                  | id 
                  | INTLITERAL 
                  | FLOATLITERAL
                  ;
addop             : PLUS 
                  | MINUS
                  ;
mulop             : MUL
                  | DIV
                  ;

/* Variable Declaration */
var_decl_list     : var_decl {var_decl_tail} ;
var_decl          : var_type id_list ';'
                  |
                  ;
var_type	  : FLOAT 
                  | INT
                  ;
any_type          : var_type 
                  | VOID
                  ;
id_list           : id id_tail ;
id_tail           : 'a' id id_tail 
                  |
                  ;
var_decl_tail     : var_decl {var_decl_tail} ;

/* Complex Statements and Condition */ 
if_stmt           : IF (cond) {decl} stmt_list else_part ENDIF ;
else_part         : ELSIF (cond) {decl} stmt_list else_part
                  |
                  ;
cond              : expr compop expr
                  | TRUE 
                  | FALSE
                  ;
compop            : '<' 
                  | '>' 
                  | '=' 
                  | '!=' 
                  | '<=' 
                  | '>='
                  ;

/* ECE 468 students use this version of do_while_stmt */
do_while_stmt       : DO {decl} stmt_list WHILE ( cond );

//keywords
PROGRAM : 'PROGRAM' ;
BEGIN   : 'BEGIN'   ;
STRING  : 'STRING'  ;
FUNCTION :  'FUNCTION' ;
INT     :  'INT' ;
FLOAT   :  'FLOAT' ;
IF      :  'IF' ;
ELSIF   :  'ELSIF' ;
ENDIF   :  'ENDIF' ;
END     :  'END' ;
VOID    :  'VOID' ;
DO      :  'DO' ;
WHILE   :  'WHILE' ;
WRITE   :  'WRITE' ;
RETURN  :  'RETURN' ;
READ    :  'READ' ;
TRUE    :  'TRUE' ;
FALSE   :  'FALSE' ;
BREAK   :  'BREAK' ;

//variable
IDENTIFIER : [_A-Za-z]+[0-9]* ;
INTLITERAL : [0-9]+ ;
FLOATLITERAL: [-]*[0-9]*[.][0-9]+ ;
STRINGLITERAL : '"'~["]*'"' ;

//operator
PLUS : '+' ;
MINUS : '-';
MUL : '*' ;
DIV : '/' ;
LPAREN : '(' ;
RPAREN : ')' ;
LBRACE : '{' ;
RBRACE : '}' ;
LABRACKET : '<' ;
RABRACKET : '>' ;
COMMA : ',' ;
EXCLAMATION : '!' ;
SEMICOLON : ';' ;
EQUAL : '=' ;
DOT : '.' ;
ASSIGN : ':=' ;
NEQUAL : '!=' ;
LEQUAL : '<=' ;
GEQUAL : '>=' ;


COMMENT : '-''-'~[\n]* -> skip ;
WS : [ \t\r\n]+ -> skip ;


